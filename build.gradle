plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    // maven {
    //     name = "OnyxStudios"
    //     url = "https://maven.abusedmaster.xyz"
    // }
	maven {
        name = 'CottonMC'
        url = 'https://server.bbkr.space/artifactory/libs-release'
    }
	maven { url 'https://jitpack.io' }

	// flatDir {
	// 	dirs 'deps'
	// }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


	// COTTON CLIENT COMMANDS
	// modImplementation "io.github.cottonmc:cotton-client-commands:${project.cotton_client_command_version}"


	// CARDINAL COMPONENTS
	// Replace modImplementation with modApi if you expose components in your own API
    // modImplementation "com.github.OnyxStudios.Cardinal-Components-API:Cardinal-Components-API:2.3.4"


	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	// modCompile "com.github.OnyxStudios:FOML:${project.foml_version}"


	// IMMERSIVE PORTALS
	//
	// modImplementation files("libs/immersive-portals-0.27(forMc1.15withFabric).jar")
	// modImplementation "curse.maven:immersive-portals-mod:2936532"
	//	modImplementation 'com.github.qouteall:ImmersivePortalsMod:${project.immersiveportal_version}'

	// OPTIFABRIC
	// modImplementation "com.github.modmuss50:OptiFabric:${project.optifabric_version}"
	// modCompile "com.github.modmuss50:OptiFabric:${project.optifabric_version}"
    // Deps required for optifabric
    // compile "org.zeroturnaround:zt-zip:1.14"

	// Satin
	modImplementation "io.github.Ladysnake:Satin:${project.satin_version}"

	// modImplementation files("libs/satin-1.4.1-SNAPSHOT.jar")
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
